c
current_user.hotel.pricing.price[43] == nil
current_user.hotel.pricing.price[43]
current_user.hotel.pricing.price[:43]
current_user.hotel.pricing
c
roomtype.images.first.url
roomtype.images.first
roomtype.images
c
roomtype
c
current_user.hotel.id == Roomtype.find(params[:room_id]).hotel_id
current_user.hotel && current_user.hotel.roomtypes.any? 
c
Roomtype.find!(params[:room_id]) 
Roomtype!.find(params[:room_id]) 
Roomtype.find(params[:room_id]) != nil
Roomtype.find(params[:room_id])
Roomtype.find(params[:room_id])!
c
Roomtype.find(4).hotel_id
Roomtype.find(1).hotel_id
 (current_user.hotel.id == Roomtype.find(params[:room_id]).hotel_id)
 Roomtype.find(params[:room_id]).hotel_id
 Roomtype.find(param[:room_id]).hotel_id
 Roomtype.find(param[:room_id])
1 == nil
current_user.hotel.id
current_user.hotel.id == Roomtype.find(param[:room_id]).hotel_id
Roomtype.find(param[:room_id]).hotel_id
current_user.hotel.roomtypes.any?
current_user.hotel
c
room
c
hotel_params
hotels_params
c
params
c
params
hotels_params
c
params[:id].to_i
params[:id]
c
params
c
exit
checkin
(price[i][:end] - checkin).to_i
c
(checkout - checkin).to_i
c
(price[i][:end] - checkin).to_i
n
c
price[i][:start]<=checkin&&price[i][:end]>=checkout
 price[i][:start] <= checkin && price[i][:end] > checkin && p[:end] < checkout
price[i]
i
c
returnprice
c
@hotel.errors
c
@hotel.errors
c
params
@hotel.errors
@hotels.errors
c
@hotel.errors
c
@hotel.errors
c
checkin-checkout
room.id
returnprice
exit
returnprice
c
booked
c
booked
c
booked
c
booked
c
booked
c
booked
c
booked
c
booked
c
booked
c
booking[i]
checkout
checkin
freq
c
hotel.bookinglog.booking[room.id]
c
hotel.bookinglog
hotel
c
Bookinglog.first.booking[1]
c
Bookinglog.first.booking[1]
        byebug
c
booking[i+3]
enddate
startdate
booking[i+2]
booking[i+1]
booking[i]
i
booking
startdate
n
enddate
startdate
c
Bookinglog.first.booking[1]
c
Bookinglog.first.booking[1]
c
Bookinglog.first.booking[1]
c
Bookinglog.first.booking[1]
Booking.first.booking[1]
a = [{:frequency=>0, :start=>Mon, 16 Jul 2018, :end=>Tue, 17 Jul 2018},{:start=>Tue, 17 Jul 2018, :end=>Wed, 18 Jul 2018, :frequency=>3},{:start=>Wed, 18 Jul 2018, :end=>Thu, 19 Jul 2018, :frequency=>2},{:start=>Thu, 19 Jul 2018, :end=>Sat, 16 Jul 2118, :frequency=>0}]
booking
[{:frequency=>0, :start=>Mon, 16 Jul 2018, :end=>Tue, 17 Jul 2018},{:start=>Tue, 17 Jul 2018, :end=>Wed, 18 Jul 2018, :frequency=>3},{:start=>Wed, 18 Jul 2018, :end=>Thu, 19 Jul 2018, :frequency=>2},{:start=>Thu, 19 Jul 2018, :end=>Sat, 16 Jul 2118, :frequency=>0}]
c
cc
c
      @hotels = @hotels.where('rating >=?',params[:rating].to_f)
    @hotels.length
    @hotels = Hotel.all
@hotels
c
vyom = Hotel.where('rating>?', 3.5)c
vyom = Hotel.where('rating>?', 3.5)
vyom = Hotel.where('rating>', 3.5)
vyom = Hotel.where(rating: 3.5)
vyom = Hotel.where('rating =', '3')
vyom = Hotel.where('rating >=', '3')
vyom.length
vyomlength
vyom
vyom = Hotel.where('rating >=', 3)
Hotel.where('rating >=', 3)
@hotels
Hotel.all
@hotels.where(id: 1)
@hotels.where('city LIKE ? or hotelname LIKE ?', city,city)
@hotels
c
@hotels.where('city LIKE ? or hotelname LIKE ?', city,city)
@hotels.length
@hotels
c
n
Bookinglog.first.booking[1]
Booking.first
Booking.first.booking[1]
booking
c
n
params
Date.new(params[:startdate].split('-')[0].to_i,params[:startdate].split('-')[1].to_i,params[:startdate].split('-')[2].to_i)
params[:startdate].split('-')[0].to_i
params[:startdate]+1
params[:startdate]
params
c
          errors.add(:ifsccode, 'invalid_format(Invalid IFSC Code)')
          errors.add(:ifsccode, 'invalid_format("Invalid IFSC Code")')
errors.add(:ifsccode, 'Invalid IFSC Code')
c
n
fuck == false
fuck
fuck = Razorpay::IFSC::IFSC.valid? ifsccode
Razorpay::IFSC::IFSC.valid? ifsccode == false
false == false
Razorpay::IFSC::IFSC.valid? ifsccode
ifsccode
Razorpay::IFSC::IFSC.valid? ifsccode == false
c
          @hotel.errors.full_messages = []
          @hotel.errors.full_messages.push('vyom')
          @hotel.errors.full_messages
          @hotels.errors
          @hotels.errors.
          @hotels.errors.any
          @hotels.errors.full_messages
          @hotels.errors.messages
          @hotels.errors[:ifsccode] << "INVALID IFSC code!!!!"
@hotel.errors
@hotel.erros
@hotel
c
@hotel
@hotels
c
answer
c
n
Razorpay::IFSC::IFSC.valid? hotel_params[:ifsccode]
Razorpay::IFSC::IFSC.valid? 'KKBK0000261'
Razorpay::IFSC::IFSC.validate(hotel_params[:ifsccode])
Razorpay::IFSC::IFSC.validate!(hotel_params[:ifsccode])
hotel_params[:ifsccode]
Razorpay::IFSC::IFSC.validate! hotel_params[:ifsccode]
c
@hotels.length
@hotelsl.ength
@hotels
c
@hotels
c
@hotels
c
@hotels.length
@hotels
c
params
@hotels.length
@hotels
c
@hotels.length
@hotels
params
c
hotels = []
hotels
c
hotels
hotels = []
hotels
b.to_sym
hotels[0].basic[b.to_sym]
b
c
params
c
params
c
